-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, the Altera Quartus Prime License Agreement,
-- the Altera MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Altera and sold by Altera or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=8;
DEPTH=32768;

ADDRESS_RADIX=HEX;
DATA_RADIX=HEX;

CONTENT BEGIN
	000  :   a9;	--		LDA	#$ff
	001  :   ff;
	002  :   aa;	--		TAX
	003  :   9a;	--		TXS
	004  :   8d;	--		STA	$3004	// GPIO1_DIR
	005  :   04;
	006  :   30;
	007  :   a9;	--		LDA	#$00
	008  :   00;
	009  :   a8;	--		TAY
	00a  :   8d;	--		STA	$3005	// GPIO1_OUT
	00b  :   05;
	00c  :   30;
	00d  :   a9;	--		LDA	#$1f	// Enable all channels
	00e  :   1f;
	00f  :   8d;	--		STA	$4015	// APU_STATUS
	010  :   15;
	011  :   40;
	012  :   a9;	--		LDA	#$ce
	013  :   ce;
	014  :   8d;	--		STA	$4002	// APU_PULSE1_TMRL
	015  :   02;
	016  :   40;
	017  :   a9;	--		LDA	#$08
	018  :   08;
	019  :   8d;	--		STA	$4003	// APU_PULSE1_LC
	01a  :   03;
	01b  :   40;
	01c  :   a9;	--		LDA	#$ff	// Duty 3, halt, constant
	01d  :   ff;
	01e  :   8d;	--		STA	$4000	// APU_PULSE1_CTRL
	01f  :   00;
	020  :   40;
	021  :   a9;	--		LDA	#$9f	// Sweep, period 1, sub, shift 7
	022  :   9f;
	023  :   8d;	--		STA	$4001	// APU_PULSE1_SWEEP
	024  :   01;
	025  :   40;
	026  :   a2;	--		LDX	#$f0	// Delay 4s
	027  :   f0;
	028  :   20;	--		JSR	$ffe0	// Function call
	029  :   e0;
	02a  :   ff;
	02b  :   a9;	--		LDA	#$7f	// No halt
	02c  :   7f;
	02d  :   8d;	--		STA	$4008	// APU_TRIANGLE_LINEAR
	02e  :   08;
	02f  :   40;
	030  :   a9;	--		LDA	#$ce
	031  :   ce;
	032  :   8d;	--		STA	$400a	// APU_TRIANGLE_TMRL
	033  :   0a;
	034  :   40;
	035  :   a9;	--		LDA	#$08
	036  :   08;
	037  :   8d;	--		STA	$400b	// APU_TRIANGLE_LC
	038  :   0b;
	039  :   40;
	03a  :   a2;	--		LDX	#$3c	// Delay 1s
	03b  :   3c;
	03c  :   20;	--		JSR	$ffe0	// Function call
	03d  :   e0;
	03e  :   ff;
	03f  :   a9;	--		LDA	#$2f	// Loop, envelope, period 15
	040  :   2f;
	041  :   8d;	--		STA	$400c	// APU_NOISE_CTRL
	042  :   0c;
	043  :   40;
	044  :   a9;	--		LDA	#$00
	045  :   00;
	046  :   8d;	--		STA	$400f	// APU_NOISE_LC
	047  :   0f;
	048  :   40;
	049  :   a9;	--		LDA	#$00
	04a  :   00;
	04b  :   8d;	--	noise0:	STA	$400e	// APU_NOISE_CFG
	04c  :   0e;
	04d  :   40;
	04e  :   8d;	--		STA	$400f	// APU_NOISE_LC
	04f  :   0f;
	050  :   40;
	051  :   a2;	--		LDX	#$1e	// Delay 500ms
	052  :   1e;
	053  :   20;	--		JSR	$ffe0	// Function call
	054  :   e0;
	055  :   ff;
	056  :   18;	--		CLC
	057  :   69;	--		ADC	#$01
	058  :   01;
	059  :   c9;	--		CMP	#$10
	05a  :   10;
	05b  :   d0;	--		BNE	noise0
	05c  :   ee;	-- -18
	05d  :   a9;	--		LDA	#$80
	05e  :   80;
	05f  :   8d;	--	noise1:	STA	$400e	// APU_NOISE_CFG
	060  :   0e;
	061  :   40;
	062  :   8d;	--		STA	$400f	// APU_NOISE_LC
	063  :   0f;
	064  :   40;
	065  :   a2;	--		LDX	#$1e	// Delay 500ms
	066  :   1e;
	067  :   20;	--		JSR	$ffe0	// Function call
	068  :   e0;
	069  :   ff;
	06a  :   18;	--		CLC
	06b  :   69;	--		ADC	#$01
	06c  :   01;
	06d  :   c9;	--		CMP	#$90
	06e  :   90;
	06f  :   d0;	--		BNE	noise1
	070  :   ee;	-- -18
	071  :   a9;	--		LDA	#$1f	// No halt, constant, volume 15
	072  :   1f;
	073  :   8d;	--		STA	$400c	// APU_NOISE_CTRL
	074  :   0c;
	075  :   40;
	076  :   a9;	--		LDA	#$08
	077  :   08;
	078  :   8d;	--		STA	$400f	// APU_NOISE_LC
	079  :   0f;
	07a  :   40;
	07b  :   a9;	--		LDA	#$9f	// Duty 2, no halt, constant
	07c  :   9f;
	07d  :   8d;	--		STA	$4004	// APU_PULSE2_CTRL
	07e  :   04;
	07f  :   40;
	080  :   a9;	--		LDA	#$88
	081  :   88;
	082  :   8d;	--		STA	$4006	// APU_PULSE2_TMRL
	083  :   06;
	084  :   40;
	085  :   a2;	--	reload:	LDX	#$3c	// Delay 1s
	086  :   3c;
	087  :   20;	--		JSR	$ffe0	// Function call
	088  :   e0;
	089  :   ff;
	08a  :   a9;	--		LDA	#$10
	08b  :   10;
	08c  :   8d;	--		STA	$4007	// APU_PULSE2_LC
	08d  :   07;
	08e  :   40;
	08f  :   c8;	--		INY
	090  :   8c;	--		STY	$3005	// GPIO1_OUT
	091  :   05;
	092  :   30;
	093  :   b8;	--		CLV
	094  :   50;	--		BVC	reload
	095  :   ef;	-- -17
	7fe0  :   48;	--		PHA		// Push A
	7fe1  :   8a;	--		TXA
	7fe2  :   48;	--		PHA		// Push X
	7fe5  :   58;	--		CLI		// Waiting for 60Hz APU IRQ
	7fe6  :   8a;	--	loop:	TXA
	7fe7  :   d0;	--		BNE	loop
	7fe8  :   fd;	-- -3
	7fe9  :   78;	--		SEI
	7fea  :   68;	--		PLA		// Pull X
	7feb  :   aa;	--		TAX
	7fec  :   68;	--		PLA		// Pull A
	7fed  :   60;	--		RTS		// Return
	7ff0  :   ca;	--	IRQ:	DEX
	7ff1  :   ad;	--		LDA	$4015
	7ff2  :   15;
	7ff3  :   40;
	7ff4  :   40;	--		RTI
	7ffa  :   00;	-- NMI vector
	7ffb  :   80;
	7ffc  :   00;	-- Reset vector
	7ffd  :   80;
	7ffe  :   f0;	-- IRQ vector
	7fff  :   ff;
END;
